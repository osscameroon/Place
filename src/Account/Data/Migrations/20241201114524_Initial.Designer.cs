// <auto-generated />
using System;
using Account.Data.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Account.Data.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20241201114524_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Account.Profile.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedAt");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("DeletedBy");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.ToTable("Profiles", (string)null);
                });

            modelBuilder.Entity("Account.Profile.Models.UserProfile", b =>
                {
                    b.OwnsOne("Account.Profile.Models.PersonalInfo", "PersonalInfo", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime?>("DateOfBirth")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DateOfBirth");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("FirstName");

                            b1.Property<int?>("Gender")
                                .HasColumnType("integer")
                                .HasColumnName("Gender");

                            b1.Property<string>("LastName")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("LastName");

                            b1.Property<string>("PhoneNumber")
                                .HasColumnType("text")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");

                            b1.OwnsOne("Account.Profile.Models.Address", "Address", b2 =>
                                {
                                    b2.Property<Guid>("PersonalInfoUserProfileId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("AdditionalDetails")
                                        .HasColumnType("text")
                                        .HasColumnName("AdditionalAddressDetails");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("City");

                                    b2.Property<string>("Country")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("Country");

                                    b2.Property<string>("Street")
                                        .HasColumnType("text")
                                        .HasColumnName("Street");

                                    b2.Property<string>("ZipCode")
                                        .HasColumnType("text")
                                        .HasColumnName("ZipCode");

                                    b2.HasKey("PersonalInfoUserProfileId");

                                    b2.ToTable("Profiles");

                                    b2.WithOwner()
                                        .HasForeignKey("PersonalInfoUserProfileId");

                                    b2.OwnsOne("Account.Profile.Models.GeoCoordinates", "Coordinates", b3 =>
                                        {
                                            b3.Property<Guid>("AddressPersonalInfoUserProfileId")
                                                .HasColumnType("uuid");

                                            b3.Property<double>("Latitude")
                                                .HasPrecision(9, 6)
                                                .HasColumnType("double precision")
                                                .HasColumnName("Latitude");

                                            b3.Property<double>("Longitude")
                                                .HasPrecision(9, 6)
                                                .HasColumnType("double precision")
                                                .HasColumnName("Longitude");

                                            b3.HasKey("AddressPersonalInfoUserProfileId");

                                            b3.ToTable("Profiles");

                                            b3.WithOwner()
                                                .HasForeignKey("AddressPersonalInfoUserProfileId");
                                        });

                                    b2.Navigation("Coordinates");
                                });

                            b1.Navigation("Address");
                        });

                    b.Navigation("PersonalInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
